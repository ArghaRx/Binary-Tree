// https://leetcode.com/problems/amount-of-time-for-binary-tree-to-be-infected/?envType=daily-question&envId=2024-01-10

class Solution {
    public int amountOfTime(TreeNode root, int start) {
     Map <Integer , List<Integer>> map = new HashMap<>();
     convert(root , -1 , map);

     Queue <Integer > que = new LinkedList<>();
     que.add(start);
    Set<Integer> visited = new HashSet<>();
        visited.add(start);

     int minutes = 0;
     while(!que.isEmpty())
     {
         int n = que.size();
        for(int  i = 0 ; i< n ; i++)
         {
             int curr = que.remove();

             for(int neig : map.getOrDefault(curr ,  Collections.emptyList()))
            {
                 if(!visited.contains(neig))
                     {
                           que.add(neig);
                          visited.add(neig);
                     }
            }   
         }
         minutes += 1;
     }
     return (minutes - 1);

    }

    //convert(root , -1 , map);
    public void convert(TreeNode root , int parent , Map <Integer , List<Integer>> map)
    {
        if (root == null) return;

         // for root node parent is  - 1
         // if it is not a parent node then add to map
         // parent , child
         if(parent != -1)
         map.computeIfAbsent(root.val , k -> new ArrayList<>()).add(parent);

         // if it is left child , add to map 
         // parent , child
         if(root.left != null)
         map.computeIfAbsent(root.val , k -> new ArrayList<>()).add(root.left.val);

         //if it has right child add to map
         // parent , child
         if(root.right != null)
         map.computeIfAbsent(root.val , k -> new ArrayList<>()).add(root.right.val);

         convert(root.left , root.val , map);
         convert(root.right , root.val , map);
    }
     
}
