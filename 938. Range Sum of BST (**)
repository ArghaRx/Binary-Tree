public class Solution {
    public int rangeSumBST(TreeNode root, int low, int high) {
        if (root == null) {
            return 0;
        }

        int currentVal = (root.val >= low && root.val <= high) ? root.val : 0;

        int leftSum = rangeSumBST(root.left, low, high);
        int rightSum = rangeSumBST(root.right, low, high);

        return currentVal + leftSum + rightSum;
    }
}


___ ANOTHER approach -_____-^!^-__

class Solution {
    public int rangeSumBST(TreeNode root, int low, int high) {
        if (root == null) return 0;

        int sum = 0;

        // Check if the current node's value is within the range
        if (root.val >= low && root.val <= high) {
            sum += root.val;
        }

        // If the current node's value is greater than the low limit, explore the left subtree
        if (root.val > low || root.val > high) {
            sum += rangeSumBST(root.left, low, high);
        }

        // If the current node's value is less than the high limit, explore the right subtree
        if (root.val < high || root.val < low) {
            sum += rangeSumBST(root.right, low, high);
        }

        return sum;
    }
}
